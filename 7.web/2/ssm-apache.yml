schemaVersion: '2.2'                            # SchemaVersion: 1.2, 2.0, 2.2を使用可能. 2.2推奨
description: Install Apache for amazon linux 2  # Documentの説明
parameters:
  yumupdate:
    type: String
    default: 'false'
    description: "(Option) yum update flag"
    allowedValues: [ 'true', 'false' ]
  tagname:
    type: String
    default: ''
    description: "(Required) ec2 tag name"
mainSteps:
- action: aws:runShellScript
  name: IsAmzLinux2
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      if [ ! -f /etc/system-release 2>/dev/null ] ; then echo "Amazon Linux 2 only support."; cat /etc/issue ; exit 1 ; fi
      if [[ ! $( cat /etc/system-release | grep -i "Amazon Linux release 2" ) ]] ; then echo "Amazon Linux 2 only support." ; cat /etc/system-release ; exit 1 ; fi
- action: aws:runShellScript
  name: TagNameCheck
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      if [[ ! $( which curl 2>/dev/null ) ]] ; then yum install -y curl ; fi
      if [[ ! $( which aws 2>/dev/null ) ]] ; then yum install -y awscli ; fi
      TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" 2>/dev/null`
      TAGNAME=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/tags/instance/Name 2>/dev/null`
      if [ $TAGNAME != {{tagname}} ] ; then echo "Tag name unmatch." ; exit 1 ; fi
      if [ "$(hostname)" != ${TAGNAME} ] ; then
        echo "rename computer name..."
        hostnamectl set-hostname ${TAGNAME}
        if [ ! $(cat /etc/cloud/cloud.cfg 2>/dev/null | grep -i preserve_hostname) ] ; then
          echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg
        else
          sed -i 's/preserve_hostname.*/preserve_hostname: true/g' /etc/cloud/cloud.cfg
        fi
      fi
      echo "computer name is $(hostname)"
- action: aws:runShellScript
  name: "YumUpdate"
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      is_yumupdate={{yumupdate}}
      if "${is_yumupdate}" ; then echo "yum update..." ; yum update -y ; fi
- action: aws:runShellScript
  name: "SetTimeZoneTokyo"
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      if [[ ! $( timedatectl 2>/dev/null | grep -Ei "Time Zone.*Asia/Tokyo" ) ]] ; then echo "set timezone..." ; timedatectl set-timezone Asia/Tokyo ; fi
      echo "timezone is $(timedatectl 2>/dev/null | grep -E 'Time zone.*')"
- action: aws:runShellScript
  name: "SetupApache"
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      if [[ ! $( which httpd 2>/dev/null ) ]] ; then yum install -y httpd ; fi
      if [[ ! $( systemctl list-units --type=service 2>/dev/null | grep -i "httpd.service" ) ]] ; then systemctl enable httpd.service 2>/dev/null; fi
      systemctl start httpd.service
      sleep 0.5
      echo "httpd status is $(systemctl status httpd 2>/dev/null | grep -E Active:.*)"
      if [[ ! $( systemctl status httpd 2>/dev/null | grep -E Active:.* | grep -i "running" ) ]] ; then echo "httpd is not running."; exit 1 ; fi
- action: aws:runShellScript
  name: "SetupWebContent"
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      echo "Test Page" > /var/www/html/index.html
      sleep 0.5
      echo "http response is..."
      echo "$(curl -I http://localhost  2>/dev/null)"
