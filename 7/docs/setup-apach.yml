schemaVersion: '2.2'                            # SchemaVersion: 1.2, 2.0, 2.2を使用可能. 2.2推奨
description: Install Apache for amazon linux 2  # Documentの説明
parameters:
  yumupdate:
    type: String
    default: 'false'
    description: "(Option) yum update flag"
    allowedValues: [ 'true', 'false' ]
  cloneurl:
    type: String
    default: 'false'
    description: "(Required) CodeCommit HTTPS Clone Url"
    allowedPattern: ^https://git-codecommit\.[a-z]{2}-[a-z]{1,}-[1-9]{1}\.amazonaws\.com/[a-z0-9]{2,}/[a-z0-9]{1,}/.*
  branch:
    type: String
    default: ''
    description: "(Required) Clone Branch"
mainSteps:
- action: aws:runShellScript
  name: ParameterCheck
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      cloneurl={{cloneurl}}
      branch={{branch}}
      if [ $cloneurl ]; then echo $cloneurl; else echo cloneurl is null ; exit 1 ; fi
      if [ $branch ]; then echo $branch; else echo branch is null ; exit 1 ; fi
- action: aws:runShellScript
  name: IsAmzLinux2
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      if [[ $(cat /etc/system-release | grep -E "^Amazon\sLinux\srelease\s2") ]]; then
        cat /etc/system-release
      else
        echo "Amazon Linux 2 only support"
        exit 1
      fi
- action: aws:runShellScript
  name: "YumUpdate"
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      is_yumupdate={{yumupdate}}
      if "${is_yumupdate}" ; then
        echo "yum update..."
        yum update -y
      else
        echo "skip yum update..."
      fi
- action: aws:runShellScript
  name: RenameComputer
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: successAndExit
    runCommand:
    - |
      #!/bin/bash
      if [[ ! $( which curl 2>/dev/null ) ]] ; then yum install -y curl ; fi
      TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" 2>/dev/null`
      TAGNAME=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/tags/instance/Name 2>/dev/null`
      if [ "$(hostname)" != ${TAGNAME} ] ; then
        echo "rename computer from $(hostname) to ${TAGNAME}..."
        hostnamectl set-hostname ${TAGNAME}
        if [ ! $(cat /etc/cloud/cloud.cfg 2>/dev/null | grep -i preserve_hostname) ] ; then
          echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg
        else
          sed -i 's/preserve_hostname.*/preserve_hostname: true/g' /etc/cloud/cloud.cfg
        fi
      fi
      echo "computer name is $(hostname)"
- action: aws:runShellScript
  name: "SetTimeZoneTokyo"
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      if [[ ! $(timedatectl 2>/dev/null | grep -E "Time zone.*Asia/Tokyo") ]] ; then
        echo "set timezone..."
        echo "change from $(timedatectl 2>/dev/null | grep -E "Time\szone.*" | sed s/"^\s\+"//g)"
        timedatectl set-timezone Asia/Tokyo
        timedatectl 2>/dev/null | grep -E "Time\szone.*" | sed s/"^\s\+"//g
      fi
      timedatectl 2>/dev/null | grep -E "Time\szone.*" | sed s/"^\s\+"//g
- action: aws:runShellScript
  name: "SetupApache"
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      if [[ ! $(which httpd 2>/dev/null) ]] ; then
        yum install -y httpd
        sleep 0.5
        systemctl start httpd.service
      fi
      if [[ ! $(systemctl status httpd.service 2>/dev/null | grep -E "Loaded:.*enabled;") ]] ; then
        systemctl enable httpd.service 2>/dev/null
      fi
      for x in {1..3}
        do
          if [[ $(systemctl status httpd.service 2>/dev/null | grep -E "Active:.*(running)") ]] ; then
            continue
          else
            systemctl start httpd.service 2>/dev/null
            sleep 1
          fi
        done
      if [[ ! $(systemctl status httpd.service 2>/dev/null | grep -E "Active:.*(running)") ]] ; then
        echo "httpd status is not running..."
        exit 1
      fi
      echo "httpd status..."
      systemctl status httpd.service 2>/dev/null | grep -E "Loaded:.*" | sed s/"^\s\+"//g
      systemctl status httpd.service 2>/dev/null | grep -E "Active:.*" | sed s/"^\s\+"//g
- action: aws:runShellScript
  name: "SetupWebContent"
  precondition:
    StringEquals:
    - platformType
    - Linux
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash
      if [[ ! $(which git 2>/dev/null) ]] ; then
        yum install -y git
      fi
      if [[ ! $(su - ec2-user -c "git config --global --list" | grep -E "!aws codecommit credential-helper") ]] ; then
        sudo -u ec2-user git config --global credential.helper '!aws codecommit credential-helper $@'
        sudo -u ec2-user git config --global credential.UseHttpPath true
        sleep 0.5
      fi
      DOCUROOT=$(cat /etc/httpd/conf/httpd.conf | grep -E ^DocumentRoot | awk '{print $2}' | sed 's/"//g')
      su - ec2-user -c "rm -rf my-website 2>/dev/null && \
      git clone -b {{branch}} {{cloneurl}} 2>/dev/null && \
      sudo cp my-website/content/* $DOCUROOT"
      HTTP_RESPONSE=$(curl http://localhost -s --max-time 1 -o /dev/null -w "%{http_code}\n")
      if [ ${HTTP_RESPONSE} -eq 200 ] ; then
        echo "success"
      else
        echo ${HTTP_RESPONSE}
        exit 1
      fi
